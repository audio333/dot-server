# Use neovim for vim if present.
[ -x "$(command -v nvim)" ] && alias vim="nvim" vimdiff="nvim -d"

# Use $XINITRC variable if file exists.
[ -f "$XINITRC" ] && alias startx="startx $XINITRC"  

# CONFIGURATION 
#alias wget=wget --hsts-file="$XDG_DATA_HOME/wget-hsts"

# dot-ubuntu
alias cfg-xmodmap="$EDITOR $XDG_CONFIG_HOME/x11/.Xmodmap"
alias cfg-xresources="$EDITOR $XDG_CONFIG_HOME/x11/.Xresources"
alias cfg-xinitrc="$EDITOR $XDG_CONFIG_HOME/x11/xinitrc" # bm-files
alias cfg-sxhkd="$EDITOR $XDG_CONFIG_HOME/sxhkd/sxhkdrc" # bm-files
alias cfg-qutebrowser="$EDITOR ~/.config/qutebrowser/qutebrowser.conf"
alias cfg-qutebrowser-keys="$EDITOR ~/.config/qutebrowser/keys.conf"
alias cfg-qutebrowser-quickmarks="$EDITOR ~/.config/qutebrowser/quickmarks"
alias cfg-transmission-daemon="$EDITOR ~/.config/transmission-daemon/settings.json"
alias cfg-transmission-ncurse="$EDITOR ~/.config/transmission-remote-cli/settings.cfg"
alias cfg-transmission-tremc="$EDITOR ~/.config/tremc/settings.cfg"
alias cfg-torrentflix="torrentflix --config=$EDITOR"
alias cfg-pulseaudio="$EDITOR /etc/pulse/default.pa"
alias cfg-bashrc="$EDITOR ~/.bashrc"

# dot-server
alias cfg-zshenv="$EDITOR ~/.zshenv" 
alias cfg-zshrc="$EDITOR $XDG_CONFIG_HOME/zsh/.zshrc" # bm-files 
alias cfg-zprofile="$EDITOR $XDG_CONFIG_HOME/zsh/.zprofile"
alias cfg-aliasrc="$EDITOR $XDG_CONFIG_HOME/shell/aliasrc" # bm-files
alias cfg-ranger="$EDITOR ~/.config/ranger/rc.conf"
alias cfg-ranger-rifle="$EDITOR ~/.config/ranger/rifle.conf"
alias cfg-ranger-commands="$EDITOR ~/.config/ranger/commands.py"
alias cfg-nvim="$EDITOR ~/.config/nvim/init.vim"
alias cfg-vimrc="$EDITOR ~/.vimrc"
alias cfg-tmuxrc="$EDITOR ~/.tmux.conf"

# dot-xui
alias cfg-newsboat="$EDITOR $XDG_CONFIG_HOME/newsboat/config" # bm-files
alias cfg-newsboat-urls="$EDITOR $XDG_CONFIG_HOME/newsboat/urls" # bm-files
alias cfg-mpv="$EDITOR ~/.config/mpv/mpv.conf"
alias cfg-mpv-input="$EDITOR ~/.config/mpv/input.conf"
alias cfg-alacritty="$EDITOR ~/.config/alacritty/alacritty.yml"
alias cfg-ytfzf="$EDITOR ~/.config/ytfzf/conf.sh"

# dot-dbox
alias cfg-lf="$EDITOR ~/.config/lf/lfrc" # bm-files

# suckless
alias cfg-dwm="$EDITOR ~/.local/src/dwm/config.h" # bm-files
alias cfg-dwmblocks="$EDITOR ~/.local/src/dwmblocks/config.h"
alias cfg-st="$EDITOR ~/.local/src/st/config.h"

# system 
alias cfg-hosts="sudo $EDITOR /etc/hosts"
alias cfg-ssh-client="sudo $EDITOR /etc/ssh/ssh_config"
alias cfg-ssh-daemon="sudo $EDITOR /etc/ssh/sshd_config"
alias cfg-fstab="sudo $EDITOR /etc/fstab"
alias cfg-group="sudo $EDITOR /etc/group"
alias cfg-grub="sudo $EDITOR /etc/default/grub"
alias cfg-samba="sudo $EDITOR /etc/samba/smb.conf"
alias cfg-networkmanager="sudo $EDITOR /etc/NetworkManager/NetworkManager.conf"

# other apps
alias cfg-nanorc="$EDITOR ~/.nanorc"
# alias cfg-mplayer="$EDITOR ~/.mplayer/config"
# alias cfg-comp="$EDITOR ~/.config/mpv/settings.ini"
# alias cfg-rofibangs="$EDITOR ~/.config/rofi/launchers/rofi-bangs"
# alias cfg-mpd="$EDITOR ~/.mpd/mpd.conf"
# alias cfg-ncmpcpp="$EDITOR ~/.ncmpcpp/config"
# alias cfg-ncmpcpp-bindings="$EDITOR ~/.ncmpcpp/bindings"
# alias cfg-retroarch="$EDITOR ~/.config/retroarch/retroarch.cfg"
# alias cfg-emulationstation="$EDITOR ~/.emulationstation/es_systems.cfg"

# other configs
alias cfg-inputrc="$EDITOR ~/.inputrc"
alias cfg-profile="$EDITOR ~/.profile"

# RELOAD CONFIGS
alias rld-zshrc="$XDG_CONFIG_HOME/zsh/.zshrc"
alias rld-xmodmap="$XDG_CONFIG_HOME/x11/.Xmodmap"
alias rld-xresources="$XDG_CONFIG_HOME/x11/.Xresources"
alias rld-xcape="killall xcape ; xcape -e 'Super_L=Escape'"
alias rld-xmodmap-uskeyboardlayout="setxkbmap -layout us" # reset back to US keyboard http://unix.stackexchange.com/a/151046
rld-hyperkey() { $XDG_CONFIG_HOME/x11/.Xmodmap; killall xcape ; xcape -e 'Super_L=Escape' ; }

alias rld-bashrc="source ~/.bashrc"
alias rld-font="fc-cache -v -f"


# settings for common commands
# use "\" to default commands. ex: \ls
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -vI"
alias bc="bc -ql"
alias mkdir="mkdir -pv"
alias grep='grep --color=auto'
alias ls="ls -hN --color=auto --group-directories-first"
[ -x "$(command -v exa)" ] && alias ls="exa --icons --group-directories-first"

# application aliases
alias v="$EDITOR"
alias vw="$EDITOR -c VimwikiIndex"
alias nb="newsboat"
alias za="zathura"
alias lf="lfub"

# git aliases
alias g="git"
alias gl="git log --graph --abbrev-commit --decorate --format=format:'%C(bold green)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold yellow)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
alias gs="git status"
alias gd="git diff"
alias gA="git add"
alias gC="git commit"
alias gb="git branch"
alias gcl="git clone"
alias gcl1="git clone --depth 1"

# tree
alias tree="tree -a -L 1"
alias tree2="tree -a -L 2"

# task spooler multiple queue list
alias tsp-md="TS_SOCKET=/tmp/md tsp"
alias tsp-dl="TS_SOCKET=/tmp/dl tsp"

# FUNCTIONS
tsp-clear() {
  tsp -C
  TS_SOCKET=/tmp/md tsp -C
  TS_SOCKET=/tmp/dl tsp -C
}

# YT
# requirements: install ytfzf yt-dlp task-spooler

## search / select video:
#ytl() { ytfzf -L | xargs -0 >> ~/download/links.txt ;} # use tab for multiple selection

## download videos/music; set a format / default format = 480p
#ytd() { 
#FORMAT="${1:-480p}"
#LINKS="~/download/links.txt"
#
#case "$FORMAT" in
#  m4a) tsp yt-dlp --format "139" -a $LINKS ;;
#  360p) tsp yt-dlp --format "134+139" -a $LINKS ;;
#  480p) tsp yt-dlp --format "135+139" -a $LINKS ;; #default format
#  720p) tsp yt-dlp --format "136+139" -a $LINKS ;;
#  1080p) tsp yt-dlp --format "137+139" -a $LINKS ;;
#esac >/dev/null
#}

se() {
  choice="$(find ~/.local/bin/ -mindepth 1 -printf '%P\n' | fzf --layout reverse)"
  [ -f "$HOME/.local/bin/$choice" ] && $EDITOR "$HOME/.local/bin/$choice"
}

dlp() {
  tsp-dl yt-dlp -o "%(title)s - %(uploader)s.%(ext)s" --embed-metadata --restrict-filenames --format "$1" "$2"
}

qd() { 
arg="${2:-480}" # set default format
hist=$HOME/.local/share/yt_history

case "$arg" in
  m4a) format="139" ;;
  360) format="134+139" ;;
  480) format="135+139" ;;
  720) format="136+139" ;;
  1080) format="137+139" ;;
esac >/dev/null

[ ! -f $hist ] && touch $hist

case "$1" in
  h) for link in $(grep -v '^#' "$hist" | fzf -m --layout reverse | cut -d' ' -f1); do dlp "$format" "$link"; done ;; # yt_history
  *youtube.com/watch*|*youtube.com/playlist*|*youtube.com/shorts*|*youtu.be*) dlp "$format" "$link" ;; # feed yt link
  *) for link in $(ytfzf -L | xargs); do dlp "$format" "$link"; done ;; # ytfzf search
esac >/dev/null
}

#ts-ytw() { 
#for link in $(ytfzf -L | xargs); do
#  tsp mpv --quiet --geometry=-15-60 --autofit=854x480 --title="mpvfloat" "$link" >/dev/null 2>&1 
#done
#}
#
## play local videos / music
#ts-play() {
#ARG="${1:-v}" # set default dir
#
#declare -a files
#declare -i i=1
#
#case "$ARG" in
#  v) DIR="$HOME/video" ;;
#  m) DIR="$HOME/music" ;;
#esac >/dev/null
#
#find $DIR -mindepth 1 -printf '%P\n' | fzf -m --layout reverse | while read -r song; do
#  files[$i]="$DIR/${song}"
#  ((i++))
#done
#
## use mpv playlist
##mpv $files
#
## use task spooler
#for file in $files[@]; do
#  tsp mpv --quiet --geometry=-15-60 --autofit=854x480 --title="mpvfloat" "$file" >/dev/null 2>&1 
#done
#
#}

qr() {
declare -a files
declare -i i=1
dir="$HOME/video"
src="local"
hist="$HOME/.local/share/yt_history"
title=""
format="${2:-480}" # set default format

[ ! -f $hist ] && touch $hist

case "$1" in
  "") find $dir -mindepth 1 -printf '%P\n' | fzf -m --layout reverse | while read -r song; do files[$i]="$dir/${song}"; ((i++)); src="local"; done ;; # local video
  h) for link in $(grep -v '^#' "$hist" | fzf -m --layout reverse | cut -d' ' -f1); do files[$i]="$link"; ((i++)); src="yt history"; done ;; # yt_history
  *youtube.com/watch*|*youtube.com/playlist*|*youtube.com/shorts*|*youtu.be*) files[$i]="$1"; src="yt" ;; # feed yt link
  *) for link in $(ytfzf -L | xargs); do files[$i]="$link"; ((i++)); src="yt"; done ;; # ytfzf search
esac >/dev/null

for file in $files[@]; do
  # history log
  if [[ -z "$1" ]] || grep -q "$file" "$hist"; then
    echo "already watched"
  else
    title=$(yt-dlp --skip-download --get-title "$file")
    echo "${file}          # ${title}" >> "$hist" 
  fi

  # use task spooler
  tsp-md mpv --ytdl-format="bestvideo[height<=?${format}]+bestaudio/best" --quiet --geometry=-15-60 --autofit=854x480 --title="$src" "$file" >/dev/null 2>&1
done

# use mpv playlist
#mpv $files
}

log_history(){
  link=$1
  hist=$2
  title=$(yt-dlp --skip-download --get-title $1)

  if grep -q "$link" "$hist"; then
    echo "already watched - ${title}"
  else
    echo "${link}          # ${title}" >> "$hist" 
    echo "url saved - ${title}"
  fi

}

qvb() {
dir="$HOME/video"
hist="$HOME/.local/share/yt_history"
urls=() # array
format="480"
src="yt"

while [ $# -gt 0 ]; do
  case $1 in
    -y) # ytfzf 
    for link in $(ytfzf -L | xargs); do 
      urls+=("$link")
    done
    ;;
    -d) # dir
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default dir: ${dir}"
    else
      [[ -d "$2" ]] && dir="$2"
    fi

    find $dir -mindepth 1 -printf '%P\n' | fzf -m --layout reverse | while read -r song; do
      tsp-md mpv --quiet --geometry=-15-60 --autofit=854x480 --title="local" "$dir/$song" >/dev/null 2>&1
    done
    ;;
    -f) # yt_history / file with list of urls
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default hist file: ${hist}"
    else
      [[ -f "$2" ]] && hist="$2"
    fi

    for link in $(grep -v '^#' "$hist" | fzf -m --layout reverse | cut -d' ' -f1); do 
      urls+=("$link")
    done
    ;;
    -u) # url
    [[ -z "$2" || "$2" == -* ]] && echo "Link not specified";

    urls+=("$2")
    ;;
    -F) # video format
    if [[ -z "$2" || "$2" == -* ]]; then
      echo "default format: ${format}"
    else
      format="$2"
    fi
    ;;
  esac

  shift
done

# check if link is valid
regex='(https?|ftp|file)://[-[:alnum:]\+&@#/%?=~_|!:,.;]*[-[:alnum:]\+&@#/%=~_|]'

for url in ${urls[@]}; do
    if [[ $url =~ $regex ]]; then
      # use task spooler then log to yt_history
      tsp-md mpv --ytdl-format="bestvideo[height<=?${format}]+bestaudio/best" --quiet --geometry=-15-60 --autofit=854x480 --title="$src" "$url" >/dev/null 2>&1
      log_history "$url" "$hist"
    else
      echo "Invalid URL"
    fi
done
}
